{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    /*Goto the metadata spreadsheet, for the VM tab, each VM will have it's own 
    template.  The parameter file should be the only requirement to populate, and the
    template should be static.  
    */

    "resourceGroupName": {
      "type": "string",
      "defaultValue": "rg_ADDS_W1",
      "metadata": { "description": "The name of the ResourceGroup to deploy the VM to." }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "w1padds1a",
      "metadata": { "description": "The name of the ResourceGroup to deploy the VM to." }
    },
    "Description": {
      "type": "string",
      "defaultValue": "Active Directory Domain Services - Internal DS ",
      "metadata": { "description": "The name of the ResourceGroup to deploy the VM to." }
    },

    "osStorageAccountType": {
      "type": "string",
      "allowedValue" [ "Standard_LRS", "Standard_GRS" ],
      "metadata": { "description": "The type of storage account used to host the Virutal Machine" }
    },
    "RoleSize": {
      "type": "string",
      "metadata": { "description": "The role size of the VM." }
    },
    "DomainName": {
      "type": "string",
      "metadata": { "description": "The Admin account used to host the VM" }
    },
    "osImageURI": {
      "type": "string",
      "metadata": { "description": "The storage account used to host the Virutal Machine" }
    },


    "osStorageAcccountName": {
      "type": "string",
      "metadata": { "description": "The storage account used to host the Virutal Machine" }
    },

    "Function": {
      "type": "string",
      "metadata": { "description": "The storage account used to host the Virutal Machine" }
    },

    "ActiveDirectoryVnetSubscriptionID": {
      "type": "string",
      "metadata": { "description": "The subscriptionID where the Active Directory domain controllers can be found.  This variable helps build the resourceID to get to the domain controller." }
    },



    "storageAccountResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Resource group of the existing storage account"
      }
    },

    "osStorageAccountName": {
      "type": "string",
      "defaultValue": "iavdcmagservicesOS1a",
      "metadata": {
        "description": "This is the name of the your storage account"
      }
    },
    "dataStorageAccountName": {
      "type": "string",
      "defaultValue": "iavdcmagservicesData1a",
      "metadata": {
        "description": "This is the name of the your storage account"
      }
    },
    "diagStorageAccountName": {
      "type": "string",
      "defaultValue": "iavdcmagservicesDiag1a",
      "metadata": {
        "description": "This is the name of the your storage account"
      }
    },
    "osDiskVhdUri": {
      "type": "string",
      "metadata": {
        "description": "Uri of the your user image"
      }
    },
    "dnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "DNS Label for the Public IP. Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "User Name for the Virtual Machine"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine"
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "This is the OS that your VM will be running"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "This is the name of the your VM"
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "This is the size of your VM"
      }
    },
    "newOrExistingVnet": {
      "allowedValues": [ "new", "existing" ],
      "type": "string",
      "metadata": {
        "description": "Select if this template needs a new VNet or will reference an existing VNet"
      }
    },
    "newOrExistingVnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "New or Existing VNet Name"
      }
    },
    "newOrExistingSubnetName": {
      "type": "string",
      "metadata": {
        "description": "New or Existing subnet Name"
      }
    },
    "existingVnetResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Resource group of the existing VNET"
      }
    },
    "nicName1": {
      "type": "string",
      "metadata": { "description": "The name used to define the NIC" }
    },
    "nicName2": {
      "type": "string",
      "metadata": { "description": "The name used to define the NIC" }
    },
    "nicName3": {
      "type": "string",
      "metadata": { "description": "The name used to define the NIC" }
    },
    "nicName4": {
      "type": "string",
      "metadata": { "description": "The name used to define the NIC" }
    },
    "vnetRGN": {
      "type": "string",
      "metadata": { "description": "The Resource Group Name of the VNET" }
    },

    "vnetName1": {
      "type": "string",
      "metadata": { "description": "The VNET name of the subnet." }
    },
    "vnetName2": {
      "type": "string",
      "metadata": { "description": "The VNET name of the subnet." }
    },
    "vnetName3": {
      "type": "string",
      "metadata": { "description": "The VNET name of the subnet." }
    },
    "vnetName4": {
      "type": "string",
      "metadata": { "description": "The VNET name of the subnet." }
    },

    "ipConfigInternalAllocation1": {
      "type": "string",
      "metadata": { "description": "Will the IP address be dynamic or static for the network interface?" }
    },
    "ipConfigInternalAllocation2": {
      "type": "string",
      "metadata": { "description": "Will the IP address be dynamic or static for the network interface?" }
    },
    "ipConfigInternalAllocation3": {
      "type": "string",
      "metadata": { "description": "Will the IP address be dynamic or static for the network interface?" }
    },
    "ipConfigInternalAllocation4": {
      "type": "string",
      "metadata": { "description": "Will the IP address be dynamic or static for the network interface?" }
    },


    "PIPName": {
      "type": "string",
      "metadata": { "description": "The name of the PublicIP Address." }
    },
    "PIPType": {
      "type": "string",
      "metadata": { "description": "The type of  PublicIP Address." }
    },
    "dnsName": {
      "type": "string",
      "metadata": { "description": "The DNS label of  PublicIP Address." }
    }
  },
    "variables": {
      "nicSubnet1": "resourceId(parameters('vnetRGN'), 'Microsoft.VirtualNetworks', parameters('vnetName1')), parameters('subnetName1')]",
      "nicSubnet2": "resourceId(parameters('vnetRGN'), 'Microsoft.VirtualNetworks', parameters('vnetName2')), parameters('subnetName2')]",
      "nicSubnet3": "resourceId(parameters('vnetRGN'), 'Microsoft.VirtualNetworks', parameters('vnetName3')), parameters('subnetName3')]",
      "nicSubnet4": "resourceId(parameters('vnetRGN'), 'Microsoft.VirtualNetworks', parameters('vnetName4')), parameters('subnetName4')]",
      "apiVersion": "2015-06-15"
    },
    "resources": [

      {
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[parameters('PIPName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "publicIPAllocationMethod": "[parameters('PIPType')]",
          "dnsSettings": {
            "domainNameLabel": "[parameters('dnsLabelPrefix')]"
          }
        }
      },
      {
        "apiVersion": "2016-03-30",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[parameters('nicName1')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', parameters('PIPName'))]",
          "Microsoft.Resources/deployments/vnet-template"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "[parameters('ipConfigInternalAllocation1')]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('PIPName'))]"
                },
                "subnet": {
                  "id": "[variables('nicSubnet1')]"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2016-03-30",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[parameters('nicName2')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "[parameters('ipConfigInternalAllocation2')]",
                "subnet": {
                  "id": "[variables('nicSubnet2')]"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2016-03-30",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[parameters('nicName3')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "[parameters('ipConfigInternalAllocation3')]",
                "subnet": {
                  "id": "[variables('nicSubnet3')]"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2016-03-30",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[parameters('nicName4')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "[parameters('ipConfigInternalAllocation4')]",
                "subnet": {
                  "id": "[variables('nicSubnet4')]"
                }
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('apiVersion')]",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[parameters('vmName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', parameters('nicName1'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('vmSize')]"
          },
          "osProfile": {
            "computerName": "[parameters('vmName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "osDisk": {
              "name": "[concat(parameters('vmName'),'-osDisk')]",
              "osType": "[parameters('osType')]",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "image": {
                "uri": "[parameters('osDiskVhdUri')]"
              },
              "vhd": {
                "uri": "[concat(reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('osStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, 'vhds/',parameters('vmName'), uniquestring(resourceGroup().id), 'osDisk.vhd')]"
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName1'))]",
                "properties": {
                  "primary": true
                }
              },
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName2'))]",
                "properties": {
                  "primary": false
                }
              },
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName3'))]",
                "properties": {
                  "primary": false
                }
              },
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName4'))]",
                "properties": {
                  "primary": false
                }
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": "true",
              "storageUri": "[concat(reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('osStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob)]"
            }

          }
        }
      }
    ]
  }
